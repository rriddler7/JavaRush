package JavaSyntax;

import javax.imageio.stream.ImageInputStream;
import java.util.Arrays;

//–ú–µ—Ç–æ–¥ Arrays.toString() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ¬´—Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞¬ª
//public class ClassArrays {
//    public static String[] strings = new String[]{"I", "love", "Java"};
//    public static int[] ints = new int[]{1, 2, 3, 4, 5, 6, 7, 8};
//
//    public static void main(String[] args) {
//        String str = Arrays.toString(strings);
//        System.out.println(str);
//        String str1 = Arrays.toString(ints);
//        System.out.println(str1);
//    }
//}

//–ú–µ—Ç–æ–¥ Arrays.deepToString()
//–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –≤ —Å—Ç—Ä–æ–∫—É (–≤—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω) –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
//public class ClassArrays {
//    public static String[][] strings = new String[][]{{"üôÇ", "üôÇ", "üôÇ", "üôÇ"}, {"üôÉ", "üôÉ", "üôÉ", "üôÉ"}, {"üòã", "üòã", "üòã", "üòã"}, {"üòé", "üòé", "üòé", "üòé"}};
//    public static int[][] ints = new int[][]{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
//
//    public static void main(String[] args) {
//        String str = Arrays.deepToString(strings);
//        System.out.println(str);
//        String inta = Arrays.deepToString(ints);
//        System.out.println(inta);
//    }
//}

//–ú–µ—Ç–æ–¥ Arrays.equals() —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
//–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true (–∏—Å—Ç–∏–Ω–∞),
//–µ—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã —Ä–∞–≤–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω—ã.
//–ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false (–ª–æ–∂—å).
//public class ClassArrays {
//    public static void main(String[] args) {
//        int[] x1 = {1, 2, 3};
//        int[] x2 = {1, 2, 3};
//        int[] x3 = {1, 2, 3, 4};
//        System.out.println(x1.equals(x2)); //false (—Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞–≤–Ω—ã). –ú–µ—Ç–æ–¥ equals —É –º–∞—Å—Å–∏–≤–æ–≤ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤
//        System.out.println(Arrays.equals(x1, x2)); //true (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–æ–≤ —Ä–∞–≤–Ω–æ)
//        System.out.println(Arrays.equals(x1, x3)); //false (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–æ–≤ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
//    }
//}

//–ú–µ—Ç–æ–¥ Arrays.deepEquals() —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã
//–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true (–∏—Å—Ç–∏–Ω–∞), –µ—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã —Ä–∞–≤–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–≤–Ω—ã.
//–ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false (–ª–æ–∂—å). –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –º–∞—Å—Å–∏–≤–∞ ‚Äî —Ç–æ–∂–µ –º–∞—Å—Å–∏–≤—ã,
//–¥–ª—è –∏—Ö —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ Arrays.deepEquals() –∏ —Ç.–¥.
//public class ClassArrays {
//    public static void main(String[] args) {
//        int[][] x1 = {{1, 2, 3}, {4, 5, 6}};
//        int[][] x2 = {{1, 2, 3}, {4, 5, 6}};
//        System.out.println(x1.equals(x2)); //false (—Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞–≤–Ω—ã)
//        System.out.println(Arrays.equals(x1, x2)); //false (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–æ–≤ –Ω–µ—Ä–∞–≤–Ω–æ)
//        //–ú–µ—Ç–æ–¥ Arrays.equals —Å—Ä–∞–≤–Ω–∏—Ç x1 –∏ x2 –∫–∞–∫ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã,
//        //–∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∏ –≤ –Ω–∏—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è —Ä–∞–∑–Ω—ã–µ.
//        System.out.println(Arrays.deepEquals(x1, x2)); //true (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–æ–≤ —Ä–∞–≤–Ω–æ)
//    }
//
//}

/*
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É–º–µ—Ä–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
*/
//public class ClassArrays {
//
//    public static int[][] arrayFirst = new int[][]{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};
//    public static int[][] arraySecond = new int[][]{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};
//
//    public static void main(String[] args) {
//        System.out.println(Arrays.deepEquals(arrayFirst, arraySecond));
//    }
//}

//–ú–µ—Ç–æ–¥ Arrays.fill() –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
//–° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ Arrays.fill() –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º
//–∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–µ –≤–µ—Å—å –º–∞—Å—Å–∏–≤, –∞ –µ–≥–æ —á–∞—Å—Ç—å –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–∞–º–∏
//–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
//public class ClassArrays {
//    public static void main(String[] args) {
//        int[] x = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
////        Arrays.fill(x, 999);
//        Arrays.fill(x, 3, 7, 999);
//        String str = Arrays.toString(x);
//        System.out.println(str);
//    }
//}

//–†–µ–∞–ª–∏–∑—É–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ main(String[]),
//–∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ array –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ valueStart –∏ valueEnd.
//–ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ —á–µ—Ç–Ω–∞—è, –µ–≥–æ –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ valueStart,
//–∞ –≤—Ç–æ—Ä—É—é ‚Äî valueEnd. –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–µ—á—ë—Ç–Ω–∞—è,
//—Ç–æ –ø–µ—Ä–≤—É—é –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ valueStart,
//–≤—Ç–æ—Ä—É—é –º–µ–Ω—å—à—É—é ‚Äî valueEnd. –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ Arrays.fill(int[], int, int, int)
//public class ClassArrays {
//    public static int[] array = new int[21];
//    public static int valueStart = 10;
//    public static int valueEnd = 13;
//
//    public static void main(String[] args) {
//        if (array.length % 2 == 0) {
//            Arrays.fill(array, 0, array.length / 2, valueStart);
//            Arrays.fill(array, array.length / 2, array.length, valueEnd);
//        }
//        else {
//            Arrays.fill(array, 0, array.length / 2 + 1, valueStart);
//            Arrays.fill(array, array.length / 2 + 1, array.length, valueEnd);
//        }
//        System.out.println(Arrays.toString(array));
//    }
//}

//–ú–µ—Ç–æ–¥ Arrays.copyOf()
//–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–º–µ–Ω—è—Ç—å –Ω–µ–ª—å–∑—è.
//–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –º–æ–∂–Ω–æ:
//–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
//–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–µ–≥–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
//–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–Ω
//—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –≤ –Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
//public class ClassArrays {
//    public static void main(String[] args) {
//        int[] x = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
//
//        int[] x2 = Arrays.copyOf(x, 5);
//        String str2 = Arrays.toString(x2);
//        System.out.println(str2);
//
//
//        int[] x3 = Arrays.copyOf(x, 15);
//        String str3 = Arrays.toString(x3);
//        System.out.println(str3);
//    }
//}

//–ú–µ—Ç–æ–¥ Arrays.copyOfRange()
//–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–æ–∂–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤,
//–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
//–∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–∞–º–∏
//public class ClassArrays {
//    public static void main(String[] args) {
//        int[] x = {11, 12, 13, 14, 15, 16, 17, 18, 19, 20};
//
//        int[] x2 = Arrays.copyOfRange(x, 5, 10);
//        String str2 = Arrays.toString(x2);
//        System.out.println(str2);
//
//        int[] x3 = Arrays.copyOfRange(x, 5, 15);
//        String str3 = Arrays.toString(x3);
//        System.out.println(str3);
//    }
//}

//–î–µ–ª–∏–º –º–∞—Å—Å–∏–≤
//–†–µ–∞–ª–∏–∑—É–π –º–µ—Ç–æ–¥ main(String[]), –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∏—Ç –º–∞—Å—Å–∏–≤ array –Ω–∞ –¥–≤–∞ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞
//–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∏–º–∏ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ result. –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–µ—á–µ—Ç–Ω–∞—è,
//—Ç–æ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–π –ø–æ–¥–º–∞—Å—Å–∏–≤.
//–î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ Arrays.copyOfRange(int[], int, int)
//public class ClassArrays {
//    public static int[][] result = new int[2][];
//    public static int[] array = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
//
//    public static void main(String[] args) {
//        if (array.length % 2 == 0) {
//            result[0] = Arrays.copyOfRange(array, 0, array.length / 2);
//            result[1] = Arrays.copyOfRange(array, array.length / 2, array.length);
//        }
//        else {
//            result[0] = Arrays.copyOfRange(array, 0, array.length / 2 + 1);
//            result[1] = Arrays.copyOfRange(array, array.length / 2 + 1, array.length);
//        }
//        System.out.println(Arrays.deepToString(result));
//    }
//}

//–ú–µ—Ç–æ–¥ Arrays.sort() —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
//–¢—Ä–∏ —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Å—Å–∏–≤–∞–º–∏:
//–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞
//–ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ) —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
//–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ (–ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ)
//–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ –≤–µ—Å—å –º–∞—Å—Å–∏–≤, –Ω–æ –∏ —á–∞—Å—Ç—å –º–∞—Å—Å–∏–≤–∞
//public class ClassArrays {
//    public static void main(String[] args) {
//        int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};
//        Arrays.sort(x);
//        String str = Arrays.toString(x);
//        System.out.println(str);
//
//        int[] x2 = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};
//        Arrays.sort(x2, 4, 8);
//        String str2 = Arrays.toString(x2);
//        System.out.println(str2);
//
//        int[] array = {9, 8, 7, 6, 5, 4, 3, 2, 1};
//        Arrays.sort(array);
//        System.out.println(Arrays.toString(array));
//    }
//}
//–í Java –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚Äî QuickSort.
//–°–∫–æ—Ä–æ—Å—Ç—å –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Å—Å–∏–≤–∞ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ N*Log(N).

//–ú–µ—Ç–æ–¥ Arrays.binarySearch()
//—É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤–µ. –≠—Ç–æ –Ω–µ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫, –∞ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫.
//–°—É—Ç—å –µ–≥–æ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤–æ—Ç –≤ —á–µ–º:
//–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
//–ó–∞—Ç–µ–º —Å—Ä–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è —Å –∏—Å–∫–æ–º—ã–º (—Å —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏—â–µ–º).
//–ï—Å–ª–∏ –∏—Å–∫–æ–º—ã–π –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –ø–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –º–∞—Å—Å–∏–≤–∞.
//–ï—Å–ª–∏ –∏—Å–∫–æ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –ø–æ–∏—Å–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ –º–∞—Å—Å–∏–≤–∞
//–ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–æ–º—É, —á—Ç–æ –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–Ω–æ –∑–∞ –æ–¥–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É –º–∞—Å—Å–∏–≤–∞.
//–ó–∞—Ç–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ –æ—Ç–±—Ä–æ—Å–∏—Ç—å –µ—â–µ –ø–æ–ª–æ–≤–∏–Ω—É –∏ —Ç.–¥.
//–ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏–Ω–¥–µ–∫—Å –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.
//public class ClassArrays {
//    public static void main(String[] args) {
//        int[] x = {11, -2, 3, 0, 999, -20, 8, -20, 99, -20};
//
//        int index1 = Arrays.binarySearch(x, 0);
//        System.out.println(index1);
//        int index2 = Arrays.binarySearch(x, -20);
//        System.out.println(index2);
//        int index3 = Arrays.binarySearch(x, 99);
//        System.out.println(index3);
//        int index4 = Arrays.binarySearch(x, 5);
//        System.out.println(index4);
//    }
//}

//–†–µ–∞–ª–∏–∑—É–π –º–µ—Ç–æ–¥ main(String[]), –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å true,
//–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, –∏–Ω–∞—á–µ ‚Äî false.
//–ú–∞—Å—Å–∏–≤ array –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//–î–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ –Ω—É–∂–µ–Ω –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫. –ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å,
//–∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ Arrays.binarySearch(int[], int) –∫–ª–∞—Å—Å–∞ Arrays.
/*
–ï—Å—Ç—å –ª–∏ –∫—Ç–æ?
*/
public class ClassArrays {
    public static int[] array = {9, 8, 7, 6, 5, 4, 3, 2, 1};
    public static int element = 5;

    public static void main(String[] args) {
        int[] copy = Arrays.copyOf(array, array.length);
        Arrays.sort(copy);
        int index = Arrays.binarySearch(copy, element);
        System.out.println(index >= 0);
    }
}